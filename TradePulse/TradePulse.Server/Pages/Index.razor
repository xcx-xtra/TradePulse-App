@page "/"
@using Microsoft.JSInterop
@inject IJSRuntime JS

<h3>ðŸ“ˆ Live Market Ticker</h3>

<ul>
    @foreach (var item in Events)
    {
        <li @key="item.Timestamp">
            <strong>@item.Symbol</strong> - $@item.Price <br />
            <small>@item.Timestamp.ToLocalTime()</small>
        </li>
    }
</ul>

@code {
    private List<MarketEvent> Events = new();
    private bool _hasInitialized = false;
    private DotNetObjectReference<Index>? _objRef;
    private bool _disposed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasInitialized)
        {
            _hasInitialized = true;
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("startSignalR", _objRef);
        }
    }

    [JSInvokable]
public async Task ReceiveMarketEvent(MarketEvent marketEvent)
{
    if (_disposed || Events == null) return;

    try
    {
        await InvokeAsync(() =>
        {
            Events.Insert(0, marketEvent);
            StateHasChanged();
        });
    }
    catch (ObjectDisposedException)
    {
        Console.WriteLine("Component was disposed before render.");
    }
    catch (InvalidOperationException ex)
    {
        Console.WriteLine($"Render failed: {ex.Message}");
    }
}

    public async ValueTask DisposeAsync()
    {
        _disposed = true;

        if (_objRef != null)
        {
            _objRef.Dispose();
        }

        if (JS != null)
        {
            await JS.InvokeVoidAsync("stopSignalR");
        }
    }

    public void Dispose()
    {
        _disposed = true;

        if (JS != null)
        {
            _ = JS.InvokeVoidAsync("stopSignalR");
        }
    }

    public class MarketEvent
    {
        public string? Symbol { get; set; }
        public decimal? Price { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
