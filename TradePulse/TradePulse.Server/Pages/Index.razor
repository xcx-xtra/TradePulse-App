@page "/"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using Blazorise.Charts

<h3>ðŸ“ˆ Live Market Ticker</h3>

<ul>
    @foreach (var item in Events)
    {
        <li @key="item.Timestamp">
            <strong>@item.Symbol</strong> - $@item.Price <br />
            <small>@(item.Timestamp?.ToLocalTime().ToShortTimeString() ?? "N/A")</small>
        </li>
    }
</ul>

<LineChart TItem="double" @ref="lineChart" />

<LiveMarketChart />

@code {
    private List<MarketEvent> Events = new();
    private bool _hasInitialized = false;
    private DotNetObjectReference<Index>? _objRef;
    private bool _disposed = false;

    private LineChart<double>? lineChart;
    private List<double> prices = new();
    private List<string> labels = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasInitialized)
        {
            _hasInitialized = true;
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("startSignalR", _objRef);
        }
    }

    [JSInvokable]
    public async Task ReceiveMarketEvent(MarketEvent marketEvent)
    {
        if (_disposed || Events == null) return;

        try
        {
            await InvokeAsync(() =>
            {
                Events.Insert(0, marketEvent);
                prices.Add((double)(marketEvent.Price ?? 0));
                labels.Add(marketEvent.Timestamp?.ToShortTimeString() ?? "N/A");

                if (prices.Count > 10)
                {
                    prices.RemoveAt(0);
                    labels.RemoveAt(0);
                }

                StateHasChanged();
            });

            await UpdateChart();
        }
        catch (ObjectDisposedException)
        {
            Console.WriteLine("Component was disposed before render.");
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"Render failed: {ex.Message}");
        }
    }

    private async Task UpdateChart()
    {
        if (lineChart == null)
        {
            Console.WriteLine("lineChart is null. Skipping update.");
            return;
        }

        await lineChart.Clear();

        var chartDataset = new LineChartDataset<double>
        {
            Data = prices,
            Label = "Price",
            BackgroundColor = "rgba(75, 192, 192, 0.2)",
            BorderColor = "rgba(75, 192, 192, 1)",
            Fill = true
        };

        await lineChart.AddLabelsDatasetsAndUpdate(labels, chartDataset);
    }

    public async ValueTask DisposeAsync()
    {
        _disposed = true;
        _objRef?.Dispose();
        if (JS != null) await JS.InvokeVoidAsync("stopSignalR");
    }

    public void Dispose()
    {
        _disposed = true;
        _ = JS?.InvokeVoidAsync("stopSignalR");
    }

    public class MarketEvent
    {
        public string? Symbol { get; set; }
        public decimal? Price { get; set; }
        public DateTime? Timestamp { get; set; }
    }
}
